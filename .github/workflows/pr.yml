name: 'Pull Request'

on:
  push:
    branches-ignore:
      - 'staging'
      - 'master'

env:
  ENVIRONMENT: local
  SECRET: ${{ secrets.SECRET }}
  DEBUG: 0
  ALLOWED_HOSTS: 127.0.0.1,localhost
  DOMAIN_URL: http://localhost:8080/
  EMAIL_ENGINE: local
  EMAIL_FILE_PATH: ${GITHUB_WORKSPACE}/emails
  HIGHCHART_SERVER: https://highcharts-export.osc-fr1.scalingo.io
  POSTGRES_DB: postgres
  CELERY_BROKER_URL: null
  CELERY_RESULT_BACKEND: null
  CELERY_TASK_ALWAYS_EAGER: null
  API_KEY_SENDINBLUE: null
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_LOCATION: ${{ secrets.AWS_LOCATION }}
  AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
  CRISP_WEBHOOK_SECRET_KEY: ${{ secrets.CRISP_WEBHOOK_SECRET_KEY }}
  CRISP_WEBSITE_ID: ${{ secrets.CRISP_WEBSITE_ID }}
  AWS_S3_ENDPOINT_URL: ${{ secrets.AWS_S3_ENDPOINT_URL }}
  PROCONNECT_DOMAIN: null
  PROCONNECT_CLIENT_ID: null
  PROCONNECT_SECRET: null

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pre-commit/action@v3.0.1
        env:
          SKIP: ggshield,sqlfluff-lint,sqlfluff-fix

  test-frontend:
    name: Frontend Tests (Jest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run frontend tests
        run: npm test -- --coverage
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

  test-backend:
    name: Backend Tests (Django)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pipenv'
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - uses: nyurik/action-setup-postgis@v1
        id: pg
      - name: Configure PostgreSQL
        run: psql -c "ALTER ROLE postgres SUPERUSER;"
      - name: Install Python dependencies
        run: pipenv install --dev
      - name: Install GDAL
        run: |
          sudo apt-add-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev
      - name: Install Node dependencies (for webpack build)
        run: npm install
      - name: Build frontend assets
        run: npm run build
      - name: Run backend tests
        run: pipenv run python -Wa manage.py test
        env:
          DATABASE_URL: ${{ steps.pg.outputs.connection-uri }}
