name: Check all Python's linters

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # use cache to skip building if no changes are detected in *.lock files
    - name: Use cache to check if rebuild is necessary
      id: cache-lock
      uses: actions/cache@v3
      with:
        key: lock-${{ hashFiles('Pipfile.lock', 'packages.lock') }}
    - name: Check if cache was hit
      id: cache-hit
      run: |
        echo "cache-hit=${{ steps.cache-lock.outputs.cache-hit }}"
        if [[ "${{ steps.cache-lock.outputs.cache-hit }}" == "true" ]]; then
          echo "Cache hit, skipping build and push steps."
          echo "##[endgroup]"
          exit 0
        fi

    # build and push image
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: swannbm
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build Docker image
      run: docker build -t swannbm/basesparte:latest .
    - name: Push Docker image
      run: docker push swannbm/basesparte:latest

  linters:
    runs-on: ubuntu-latest
    container:
      image: swannbm/basesparte:latest
    defaults:
      run:
        working-directory: /app
    steps:
    - uses: actions/checkout@v3
    - name: Check with Black
      run: black --check --include='\.py$' --exclude='/migrations/' .

    # - name: check black formatting
    #   run: pipenv run black --check --include="\.py" --exclude="env/*,0*" .

    # - name: check isort
    #   run: pipenv run isort . --check-only --skip env

    # - name: Run Tests
    #   run: |
    #     python manage.py test

    # - name: Run test suite
    #   run: |
    #     pipenv run test -svvv
    #   env:
    #     TEST_DB_HOST: localhost
    #     TEST_DB_NAME: postgres
    #     TEST_DB_PASS: postgres
    #     TEST_DB_PORT: 5432
    #     TEST_DB_USER: postgres

    # - name: Run linter
    #   run: |
    #     pipenv run lint

    # - name: Run formatting check
    #   run: |
    #     pipenv run format --check

    # - name: Setup node.js (for pyright)
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: "12"

    # - name: Run type checking
    #   run: |
    #     npm install -g pyright
    #     pipenv run typecheck
