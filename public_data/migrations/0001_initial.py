# Generated by Django 4.2.13 on 2024-12-18 12:14

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from public_data.models.administration import GetDataFromCeremaMixin, LandMixin
import public_data.models.mixins


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ArtifAreaZoneUrba",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Millésime",
                    ),
                ),
                ("departement", models.CharField(max_length=3, verbose_name="Département")),
                ("area", models.DecimalField(decimal_places=4, max_digits=15, verbose_name="Surface artificialisée")),
            ],
            options={
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ArtificialArea",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False, verbose_name="ID")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Année",
                    ),
                ),
                ("surface", models.DecimalField(decimal_places=4, max_digits=15, verbose_name="surface")),
                ("city", models.CharField(max_length=254, verbose_name="Commune")),
                ("departement", models.CharField(max_length=15, verbose_name="Département")),
            ],
            options={
                "verbose_name": "OCSGE - Artificialisation (par commune)",
                "verbose_name_plural": "OCSGE - Artificialisation (par commune)",
                "managed": False,
            },
            bases=(public_data.models.mixins.DataColorationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Commune",
            fields=[
                (
                    "insee",
                    models.CharField(max_length=7, primary_key=True, serialize=False, verbose_name="Code INSEE"),
                ),
                ("name", models.CharField(max_length=50, verbose_name="Nom")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
                (
                    "first_millesime",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Premier millésime disponible",
                    ),
                ),
                (
                    "last_millesime",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Dernier millésime disponible",
                    ),
                ),
                ("area", models.DecimalField(decimal_places=4, max_digits=15, verbose_name="Surface")),
                (
                    "surface_artif",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=15, null=True, verbose_name="Surface artificielle"
                    ),
                ),
                ("ocsge_available", models.BooleanField(default=False, verbose_name="Statut de couverture OCSGE")),
                (
                    "consommation_correction_status",
                    models.CharField(
                        choices=[
                            ("UNCHANGED", "Inchangé"),
                            ("DIVISION", "Division"),
                            ("FUSION", "Fusion"),
                            ("COG_ERROR", "Erreur COG"),
                            ("MISSING_FROM_SOURCE", "Manquant dans la source"),
                        ],
                        max_length=20,
                        verbose_name="Statut de correction des données de consommation",
                    ),
                ),
                (
                    "competence_planification",
                    models.BooleanField(default=False, verbose_name="Compétence planification"),
                ),
            ],
            options={
                "managed": False,
            },
            bases=(
                public_data.models.mixins.DataColorationMixin,
                LandMixin,
                GetDataFromCeremaMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CommuneDiff",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "year_old",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Ancienne année",
                    ),
                ),
                (
                    "year_new",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Nouvelle année",
                    ),
                ),
                (
                    "new_artif",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=15, null=True, verbose_name="Artificialisation"
                    ),
                ),
                (
                    "new_natural",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=15, null=True, verbose_name="Renaturation"
                    ),
                ),
                (
                    "net_artif",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=15, null=True, verbose_name="Artificialisation nette"
                    ),
                ),
            ],
            options={
                "verbose_name": "OCSGE - Différence (par commune)",
                "verbose_name_plural": "OCSGE - Différence (par commune)",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CommuneSol",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Millésime",
                    ),
                ),
                (
                    "surface",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=15, null=True, verbose_name="Surface"
                    ),
                ),
            ],
            options={
                "verbose_name": "OCSGE - Couverture x usage des sols (par commune)",
                "verbose_name_plural": "OCSGE - Couverture x usage des sols (par commune)",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Departement",
            fields=[
                (
                    "source_id",
                    models.CharField(
                        max_length=50, primary_key=True, serialize=False, verbose_name="Identifiant source"
                    ),
                ),
                ("is_artif_ready", models.BooleanField(default=False, verbose_name="Données artif disponibles")),
                (
                    "ocsge_millesimes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, null=True, size=None
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="Nom")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Département",
                "managed": False,
            },
            bases=(
                LandMixin,
                GetDataFromCeremaMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Epci",
            fields=[
                (
                    "source_id",
                    models.CharField(
                        max_length=50, primary_key=True, serialize=False, verbose_name="Identifiant source"
                    ),
                ),
                ("name", models.CharField(max_length=70, verbose_name="Nom")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
            ],
            options={
                "verbose_name": "EPCI",
                "managed": False,
            },
            bases=(
                LandMixin,
                GetDataFromCeremaMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="LandConso",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("surface", models.FloatField()),
                ("year", models.IntegerField()),
                ("total", models.FloatField()),
                ("activite", models.FloatField()),
                ("habitat", models.FloatField()),
                ("mixte", models.FloatField()),
                ("route", models.FloatField()),
                ("ferroviaire", models.FloatField()),
                ("inconnu", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landconso",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandConsoComparison",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "relevance_level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("land_id", models.CharField()),
                ("from_year", models.IntegerField()),
                ("to_year", models.IntegerField()),
                ("total_median", models.FloatField()),
                ("total_median_percent", models.FloatField()),
                ("total_avg", models.FloatField()),
                ("total_percent", models.FloatField()),
                ("activite_median", models.FloatField()),
                ("activite_median_percent", models.FloatField()),
                ("activite_avg", models.FloatField()),
                ("activite_percent", models.FloatField()),
                ("habitat_median", models.FloatField()),
                ("habitat_median_percent", models.FloatField()),
                ("habitat_avg", models.FloatField()),
                ("habitat_percent", models.FloatField()),
                ("mixte_median", models.FloatField()),
                ("mixte_median_percent", models.FloatField()),
                ("mixte_avg", models.FloatField()),
                ("mixte_percent", models.FloatField()),
                ("route_median", models.FloatField()),
                ("route_median_percent", models.FloatField()),
                ("route_avg", models.FloatField()),
                ("route_percent", models.FloatField()),
                ("ferroviaire_median", models.FloatField()),
                ("ferroviaire_median_percent", models.FloatField()),
                ("ferroviaire_avg", models.FloatField()),
                ("ferroviaire_percent", models.FloatField()),
                ("inconnu_median", models.FloatField()),
                ("inconnu_median_percent", models.FloatField()),
                ("inconnu_avg", models.FloatField()),
                ("inconnu_percent", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landconsocomparison",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandConsoStats",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                (
                    "comparison_level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                (
                    "comparison_id",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("from_year", models.IntegerField()),
                ("to_year", models.IntegerField()),
                ("total", models.FloatField()),
                ("total_percent", models.FloatField()),
                ("activite", models.FloatField()),
                ("activite_percent", models.FloatField()),
                ("habitat", models.FloatField()),
                ("habitat_percent", models.FloatField()),
                ("mixte", models.FloatField()),
                ("mixte_percent", models.FloatField()),
                ("route", models.FloatField()),
                ("route_percent", models.FloatField()),
                ("ferroviaire", models.FloatField()),
                ("ferroviaire_percent", models.FloatField()),
                ("inconnu", models.FloatField()),
                ("inconnu_percent", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landconsostats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandPop",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("year", models.IntegerField()),
                ("evolution", models.IntegerField()),
                ("population", models.IntegerField()),
                ("source", models.CharField(choices=[("INSEE", "Insee"), ("PROJECTION", "Projection")])),
            ],
            options={
                "db_table": "public_data_landpop",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandPopComparison",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "relevance_level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("land_id", models.CharField()),
                ("from_year", models.IntegerField()),
                ("to_year", models.IntegerField()),
                ("evolution_median", models.FloatField()),
                ("evolution_median_percent", models.FloatField()),
                ("evolution_avg", models.FloatField()),
                ("evolution_percent", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landpopcomparison",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandPopStats",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("comparison_level", models.CharField()),
                (
                    "comparison_id",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("from_year", models.IntegerField()),
                ("to_year", models.IntegerField()),
                ("evolution", models.FloatField()),
                ("evolution_percent", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landpopstats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Ocsge",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False, verbose_name="ID")),
                ("couverture", models.CharField(max_length=254, verbose_name="Couverture du sol")),
                ("usage", models.CharField(max_length=254, verbose_name="Usage du sol")),
                ("id_source", models.CharField(max_length=200, verbose_name="ID source")),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Année",
                    ),
                ),
                ("is_artificial", models.BooleanField(verbose_name="Est artificiel")),
                ("is_impermeable", models.BooleanField(verbose_name="Est imperméable")),
                ("surface", models.DecimalField(decimal_places=4, max_digits=15, verbose_name="surface")),
                ("departement", models.CharField(max_length=15, verbose_name="Département")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
            ],
            options={
                "verbose_name": "OCSGE",
                "verbose_name_plural": "OCSGE",
                "managed": False,
            },
            bases=(public_data.models.mixins.DataColorationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="OcsgeDiff",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "year_old",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Ancienne année",
                    ),
                ),
                (
                    "year_new",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Nouvelle année",
                    ),
                ),
                ("cs_new", models.CharField(max_length=12, verbose_name="Code nouvelle couverture")),
                ("cs_old", models.CharField(max_length=12, verbose_name="Code ancienne couverture")),
                ("us_new", models.CharField(max_length=12, verbose_name="Code nouveau usage")),
                ("us_old", models.CharField(max_length=12, verbose_name="Code ancien usage")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
                ("surface", models.DecimalField(decimal_places=4, max_digits=15, verbose_name="surface")),
                ("is_new_artif", models.BooleanField()),
                ("is_new_natural", models.BooleanField(verbose_name="Aussi appelé désartificialisation")),
                ("is_new_impermeable", models.BooleanField()),
                ("is_new_not_impermeable", models.BooleanField(verbose_name="Aussi appelé désimperméabilisation")),
                ("departement", models.CharField(max_length=15, verbose_name="Département")),
            ],
            options={
                "verbose_name": "OCSGE - Différence",
                "verbose_name_plural": "OCSGE - Différence",
                "managed": False,
            },
            bases=(public_data.models.mixins.DataColorationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                ("source_id", models.CharField(max_length=50, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50, verbose_name="Nom")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Région",
                "managed": False,
            },
            bases=(
                LandMixin,
                GetDataFromCeremaMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Scot",
            fields=[
                ("siren", models.CharField(max_length=12, verbose_name="Siren")),
                (
                    "source_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name="ID Source"),
                ),
                ("name", models.CharField(max_length=250, verbose_name="Nom")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
            ],
            options={
                "managed": False,
            },
            bases=(
                LandMixin,
                GetDataFromCeremaMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ZoneConstruite",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False, verbose_name="ID")),
                ("id_source", models.CharField(max_length=200, verbose_name="ID Source")),
                ("millesime", models.CharField(max_length=200, verbose_name="Millesime")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2000),
                            django.core.validators.MaxValueValidator(2050),
                        ],
                        verbose_name="Année",
                    ),
                ),
                ("surface", models.DecimalField(decimal_places=4, max_digits=15, verbose_name="surface")),
                ("departement", models.CharField(max_length=15, verbose_name="Département")),
            ],
            options={
                "verbose_name": "OCSGE - Zone construite",
                "verbose_name_plural": "OCSGE - Zone construite",
                "managed": False,
            },
            bases=(public_data.models.mixins.DataColorationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ZoneUrba",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("checksum", models.TextField(unique=True, verbose_name="checksum")),
                ("libelle", models.CharField(blank=True, max_length=80, null=True, verbose_name="libelle")),
                ("libelong", models.CharField(blank=True, max_length=254, null=True, verbose_name="libelong")),
                ("idurba", models.CharField(blank=True, max_length=80, null=True, verbose_name="idurba")),
                ("typezone", models.CharField(blank=True, max_length=3, null=True, verbose_name="typezone")),
                ("partition", models.CharField(blank=True, max_length=80, null=True, verbose_name="partition")),
                ("datappro", models.CharField(blank=True, max_length=80, null=True, verbose_name="datappro")),
                ("datvalid", models.CharField(blank=True, max_length=80, null=True, verbose_name="datvalid")),
                (
                    "area",
                    models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True, verbose_name="area"),
                ),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
            ],
            options={
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CouvertureSol",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code_prefix", models.CharField(max_length=10, unique=True, verbose_name="Nomenclature préfixée")),
                ("code", models.CharField(max_length=8, unique=True, verbose_name="Nomenclature")),
                ("label", models.CharField(max_length=250, verbose_name="Libellé")),
                ("label_short", models.CharField(blank=True, max_length=50, null=True, verbose_name="Libellé court")),
                ("map_color", models.CharField(blank=True, max_length=8, null=True, verbose_name="Couleur")),
                ("is_key", models.BooleanField(default=False, verbose_name="Est déterminant")),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="children",
                        to="public_data.couverturesol",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Sudocuh",
            fields=[
                ("code_insee", models.CharField(max_length=200, primary_key=True, serialize=False)),
                ("code_departement", models.CharField(max_length=200)),
                ("nom_region", models.CharField(max_length=200)),
                ("nom_commune", models.CharField(max_length=200)),
                (
                    "collectivite_porteuse",
                    models.CharField(
                        help_text="Nom de la collectivité qui a la compétence PLU (DU)",
                        max_length=200,
                        verbose_name="Collectivité porteuse",
                    ),
                ),
                (
                    "siren_epci",
                    models.CharField(
                        blank=True,
                        help_text="Indiqué lorsque la collectivité porteuse est de type EPCI",
                        max_length=200,
                        null=True,
                        verbose_name="SIREN EPCI",
                    ),
                ),
                (
                    "code_etat",
                    models.CharField(
                        help_text="Sur 2 caracteres, le premier codifie le document opposable(1-CC, 2-POS, 3-PLU, 9-RNU), le 2e caractere codifie le type de DU de la procédure en cours (1-CC, 3-PLU, 9- Aucune procédure en cours)",
                        max_length=2,
                        verbose_name="Code état",
                    ),
                ),
                (
                    "du_opposable",
                    models.CharField(
                        choices=[
                            ("CC", "Carte communale"),
                            ("POS", "Plan d'occupation des sols"),
                            ("PLU", "Plan local d'urbanisme"),
                            ("RNU", "Règlement national d'urbanisme"),
                            ("PLUi", "Plan local d'urbanisme intercommunal"),
                            ("PLUiS", "Plan local d'urbanisme intercommunal simplifié"),
                        ],
                        default="RNU",
                        help_text="Document d'urbanisme actuellement en vigueur sur la commune (CC, POS, PLU, RNU, PLUi, PLUiS)Valeur par défaut est RNU. Voir le commentaire sur data.gouv pour plus d'informations :https://www.data.gouv.fr/en/datasets/planification-nationale-des-documents-durbanisme-plu-plui-cc-rnu-donnees-sudocuh-dernier-etat-des-lieux-annuel-au-31-decembre-2023/#/discussions:~:text=Claire%20Chaine,pour%20votre%20alerte",
                        max_length=200,
                        verbose_name="Document d'urbanisme opposable",
                    ),
                ),
                (
                    "du_en_cours",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CC", "Carte communale"),
                            ("POS", "Plan d'occupation des sols"),
                            ("PLU", "Plan local d'urbanisme"),
                            ("RNU", "Règlement national d'urbanisme"),
                            ("PLUi", "Plan local d'urbanisme intercommunal"),
                            ("PLUiS", "Plan local d'urbanisme intercommunal simplifié"),
                        ],
                        help_text="Document d'urbanisme en cours de création / révision (CC, POS, PLU, RNU, PLUi, PLUiS)",
                        max_length=200,
                        null=True,
                        verbose_name="Document d'urbanisme en cours",
                    ),
                ),
                ("code_bcsi", models.CharField(max_length=200)),
                ("etat_commune", models.CharField(max_length=200)),
                ("etat_detaille", models.CharField(max_length=200)),
                (
                    "prescription_du_en_vigueur",
                    models.DateField(blank=True, null=True, verbose_name="Prescription du DU en vigueur"),
                ),
                (
                    "approbation_du_en_vigueur",
                    models.DateField(blank=True, null=True, verbose_name="Approbation du DU en vigueur"),
                ),
                (
                    "executoire_du_en_vigueur",
                    models.DateField(blank=True, null=True, verbose_name="Executoire du DU en vigueur"),
                ),
                (
                    "prescription_proc_en_cours",
                    models.DateField(blank=True, null=True, verbose_name="Prescription de la procédure en cours"),
                ),
                ("population_municipale", models.IntegerField()),
                ("population_totale", models.IntegerField()),
                ("superficie", models.FloatField(verbose_name="Superficie (en ha)")),
            ],
            options={
                "verbose_name": "Données Sudocuh (par commune)",
                "verbose_name_plural": "Données Sudocuh (par commune)",
            },
        ),
        migrations.CreateModel(
            name="SudocuhEpci",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("nom_region", models.CharField(max_length=200)),
                ("code_departement", models.CharField(max_length=200)),
                ("nom_departement", models.CharField(max_length=200)),
                ("siren", models.CharField(max_length=200)),
                (
                    "type_epci",
                    models.CharField(
                        choices=[
                            ("CC", "Communauté de communes"),
                            ("CA", "Communauté d'agglomération"),
                            ("CU", "Communauté urbaine"),
                            ("EPT", "Établissement public territorial"),
                            ("MET", "Métropole"),
                            ("PETR", "Pôle d'équilibre territorial et rural"),
                            ("PM", "Pays"),
                            ("SM", "Syndicat mixte"),
                            ("SI", "Syndicat intercommunal"),
                            ("AUTRE", "Autre"),
                        ],
                        max_length=200,
                    ),
                ),
                ("nom_epci", models.CharField(max_length=200)),
                ("date_creation_epci", models.DateField(null=True)),
                ("epci_interdepartemental", models.BooleanField()),
                ("competence_plan", models.BooleanField()),
                ("competence_scot", models.BooleanField()),
                ("competence_plh", models.BooleanField()),
                ("obligation_plh", models.BooleanField()),
                ("nb_communes", models.IntegerField()),
                ("insee_pop_tot_2021", models.IntegerField()),
                ("insee_pop_municipale", models.IntegerField()),
                ("insee_superficie", models.FloatField()),
            ],
            options={
                "verbose_name": "Données Sudocuh (par EPCI)",
                "verbose_name_plural": "Données Sudocuh (par EPCI)",
            },
        ),
        migrations.CreateModel(
            name="UsageSol",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code_prefix", models.CharField(max_length=10, unique=True, verbose_name="Nomenclature préfixée")),
                ("code", models.CharField(max_length=8, unique=True, verbose_name="Nomenclature")),
                ("label", models.CharField(max_length=250, verbose_name="Libellé")),
                ("label_short", models.CharField(blank=True, max_length=50, null=True, verbose_name="Libellé court")),
                ("map_color", models.CharField(blank=True, max_length=8, null=True, verbose_name="Couleur")),
                ("is_key", models.BooleanField(default=False, verbose_name="Est déterminant")),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="children",
                        to="public_data.usagesol",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CouvertureUsageMatrix",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_artificial",
                    models.BooleanField(blank=True, default=False, null=True, verbose_name="Artificiel"),
                ),
                ("is_impermeable", models.BooleanField(blank=True, null=True, verbose_name="Imperméable")),
                ("is_natural", models.BooleanField(blank=True, default=None, null=True, verbose_name="Naturel")),
                (
                    "label",
                    models.CharField(
                        choices=[
                            ("ARTIF", "Artificiel"),
                            ("CONSU", "Consommé"),
                            ("NAF", "NAF"),
                            ("ARTIF_NOT_CONSU", "Artificiel non consommé"),
                            ("NONE", "Non renseigné"),
                        ],
                        default="NONE",
                        max_length=20,
                        verbose_name="Libellé",
                    ),
                ),
                (
                    "couverture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="public_data.couverturesol",
                    ),
                ),
                (
                    "usage",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="public_data.usagesol"
                    ),
                ),
            ],
            options={
                "indexes": [models.Index(fields=["is_artificial"], name="matrix-is_artificial-index")],
            },
        ),
        migrations.AddConstraint(
            model_name="couvertureusagematrix",
            constraint=models.UniqueConstraint(fields=("couverture", "usage"), name="matrix-couverture-usage-unique"),
        ),
    ]
