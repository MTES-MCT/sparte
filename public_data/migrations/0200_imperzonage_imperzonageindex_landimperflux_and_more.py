# Generated by Django 4.2.20 on 2025-10-19 19:49

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("public_data", "0199_landfriche_landfrichegeojson_landfrichepollution_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="ImperZonage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("departement", models.CharField()),
                ("year", models.IntegerField()),
                ("zonage_surface", models.FloatField()),
                ("impermeablesurface", models.FloatField()),
                ("zonage_type", models.CharField()),
                ("zonage_count", models.IntegerField()),
                ("impermeablepercent", models.FloatField()),
                ("millesime_index", models.IntegerField()),
            ],
            options={
                "db_table": "public_data_imperzonage",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ImperZonageIndex",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("departements", django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), size=None)),
                ("years", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("zonage_surface", models.FloatField()),
                ("impermeable_surface", models.FloatField()),
                ("zonage_type", models.CharField()),
                ("zonage_count", models.IntegerField()),
                ("impermeable_percent", models.FloatField()),
                ("millesime_index", models.IntegerField()),
            ],
            options={
                "db_table": "public_data_imperzonageindex",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperFlux",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField(max_length=50)),
                ("land_type", models.CharField(max_length=50)),
                ("year_old", models.IntegerField()),
                ("year_new", models.IntegerField()),
                ("millesime_old_index", models.IntegerField()),
                ("millesime_new_index", models.IntegerField()),
                ("flux_imper", models.FloatField(help_text="Surface imperméabilisée en ha")),
                ("flux_desimper", models.FloatField(help_text="Surface désimperméabilisée en ha")),
                ("flux_imper_net", models.FloatField(help_text="Flux net d'imperméabilisation en ha")),
                ("departement", models.CharField(max_length=10)),
            ],
            options={
                "db_table": "public_data_landimperflux",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperFluxCouvertureComposition",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField(max_length=50)),
                ("land_type", models.CharField(max_length=50)),
                ("departement", models.CharField(max_length=10)),
                ("year_old", models.IntegerField()),
                ("year_new", models.IntegerField()),
                ("millesime_old_index", models.IntegerField()),
                ("millesime_new_index", models.IntegerField()),
                ("couverture", models.CharField(max_length=100)),
                ("color", models.CharField()),
                ("label_short", models.CharField()),
                ("label", models.CharField()),
                ("flux_imper", models.FloatField(help_text="Surface imperméabilisée en ha")),
                ("flux_desimper", models.FloatField(help_text="Surface désimperméabilisée en ha")),
                ("flux_imper_net", models.FloatField(help_text="Flux net d'imperméabilisation en ha")),
            ],
            options={
                "db_table": "public_data_landimperfluxcouverturecomposition",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperFluxCouvertureCompositionIndex",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField(max_length=50)),
                ("land_type", models.CharField(max_length=50)),
                (
                    "departements",
                    django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), size=None),
                ),
                ("years_old", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("years_new", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("millesime_old_index", models.IntegerField()),
                ("millesime_new_index", models.IntegerField()),
                ("couverture", models.CharField(max_length=100)),
                ("color", models.CharField()),
                ("label_short", models.CharField()),
                ("label", models.CharField()),
                ("flux_imper", models.FloatField(help_text="Surface imperméabilisée en ha")),
                ("flux_desimper", models.FloatField(help_text="Surface désimperméabilisée en ha")),
                ("flux_imper_net", models.FloatField(help_text="Flux net d'imperméabilisation en ha")),
            ],
            options={
                "db_table": "public_data_landimperfluxcouverturecompositionindex",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperFluxIndex",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField(max_length=50)),
                ("land_type", models.CharField(max_length=50)),
                ("years_old", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("years_new", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("millesime_old_index", models.IntegerField()),
                ("millesime_new_index", models.IntegerField()),
                ("flux_imper", models.FloatField(help_text="Surface imperméabilisée en ha")),
                ("flux_desimper", models.FloatField(help_text="Surface désimperméabilisée en ha")),
                ("flux_imper_net", models.FloatField(help_text="Flux net d'imperméabilisation en ha")),
                (
                    "departements",
                    django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), size=None),
                ),
            ],
            options={
                "db_table": "public_data_landimperfluxindex",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperFluxUsageComposition",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField(max_length=50)),
                ("land_type", models.CharField(max_length=50)),
                ("departement", models.CharField(max_length=10)),
                ("year_old", models.IntegerField()),
                ("year_new", models.IntegerField()),
                ("millesime_old_index", models.IntegerField()),
                ("millesime_new_index", models.IntegerField()),
                ("usage", models.CharField(max_length=100)),
                ("color", models.CharField()),
                ("label_short", models.CharField()),
                ("label", models.CharField()),
                ("flux_imper", models.FloatField(help_text="Surface imperméabilisée en ha")),
                ("flux_desimper", models.FloatField(help_text="Surface désimperméabilisée en ha")),
                ("flux_imper_net", models.FloatField(help_text="Flux net d'imperméabilisation en ha")),
            ],
            options={
                "db_table": "public_data_landimperfluxusagecomposition",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperFluxUsageCompositionIndex",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField(max_length=50)),
                ("land_type", models.CharField(max_length=50)),
                (
                    "departements",
                    django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), size=None),
                ),
                ("years_old", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("years_new", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("millesime_old_index", models.IntegerField()),
                ("millesime_new_index", models.IntegerField()),
                ("usage", models.CharField(max_length=100)),
                ("color", models.CharField()),
                ("label_short", models.CharField()),
                ("label", models.CharField()),
                ("flux_imper", models.FloatField(help_text="Surface imperméabilisée en ha")),
                ("flux_desimper", models.FloatField(help_text="Surface désimperméabilisée en ha")),
                ("flux_imper_net", models.FloatField(help_text="Flux net d'imperméabilisation en ha")),
            ],
            options={
                "db_table": "public_data_landimperfluxusagecompositionindex",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperStock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("departement", models.CharField()),
                ("year", models.IntegerField()),
                ("surface", models.FloatField()),
                ("percent", models.FloatField()),
                ("millesime_index", models.IntegerField()),
                ("flux_surface", models.FloatField()),
                ("flux_percent", models.FloatField()),
                ("flux_previous_year", models.IntegerField()),
            ],
            options={
                "db_table": "public_data_landimperstock",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperStockCouvertureComposition",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("departement", models.CharField()),
                ("year", models.IntegerField()),
                ("percent_of_land", models.FloatField()),
                ("surface", models.FloatField()),
                ("percent_of_imper", models.FloatField()),
                ("millesime_index", models.IntegerField()),
                ("color", models.CharField()),
                ("label", models.CharField()),
                ("label_short", models.CharField()),
                ("couverture", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "public_data_landimperstockcouverturecomposition",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperStockCouvertureCompositionIndex",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("departements", django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), size=None)),
                ("years", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("percent_of_land", models.FloatField()),
                ("surface", models.FloatField()),
                ("percent_of_imper", models.FloatField()),
                ("millesime_index", models.IntegerField()),
                ("color", models.CharField()),
                ("label", models.CharField()),
                ("label_short", models.CharField()),
                ("couverture", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "public_data_landimperstockcouverturecompositionindex",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperStockIndex",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("departements", django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), size=None)),
                ("years", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("surface", models.FloatField()),
                ("percent", models.FloatField()),
                ("millesime_index", models.IntegerField()),
                ("flux_surface", models.FloatField()),
                ("flux_percent", models.FloatField()),
                (
                    "flux_previous_years",
                    django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None),
                ),
            ],
            options={
                "db_table": "public_data_landimperstockindex",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperStockUsageComposition",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("departement", models.CharField()),
                ("year", models.IntegerField()),
                ("percent_of_land", models.FloatField()),
                ("surface", models.FloatField()),
                ("percent_of_imper", models.FloatField()),
                ("millesime_index", models.IntegerField()),
                ("color", models.CharField()),
                ("label", models.CharField()),
                ("label_short", models.CharField()),
                ("usage", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "public_data_landimperstockusagecomposition",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandImperStockUsageCompositionIndex",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("departements", django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), size=None)),
                ("years", django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ("percent_of_land", models.FloatField()),
                ("surface", models.FloatField()),
                ("percent_of_imper", models.FloatField()),
                ("millesime_index", models.IntegerField()),
                ("color", models.CharField()),
                ("label", models.CharField()),
                ("label_short", models.CharField()),
                ("usage", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "public_data_landimperstockusagecompositionindex",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SimilarTerritories",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                ("land_name", models.CharField(help_text="Nom du territoire source")),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("similar_land_id", models.CharField()),
                ("similar_land_name", models.CharField(help_text="Nom du territoire similaire")),
                ("population_source", models.FloatField()),
                ("population_similar", models.FloatField()),
                ("population_difference", models.FloatField()),
                (
                    "distance_km",
                    models.FloatField(help_text="Distance en kilomètres entre les centroïdes des territoires"),
                ),
                ("similarity_rank", models.IntegerField()),
            ],
            options={
                "db_table": "public_data_similarterritories",
                "ordering": ["land_id", "land_type", "similarity_rank"],
                "managed": False,
            },
        ),
    ]
