# Generated by Django 4.2.13 on 2024-12-03 11:10

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("public_data", "0192_landconso_landconsocomparison_landconsostats_landpop_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="LandConso",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("surface", models.FloatField()),
                ("year", models.IntegerField()),
                ("total", models.FloatField()),
                ("activite", models.FloatField()),
                ("habitat", models.FloatField()),
                ("mixte", models.FloatField()),
                ("route", models.FloatField()),
                ("ferroviaire", models.FloatField()),
                ("inconnu", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landconso",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandConsoComparison",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "relevance_level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("land_id", models.CharField()),
                ("from_year", models.IntegerField()),
                ("to_year", models.IntegerField()),
                ("total_median", models.FloatField()),
                ("total_median_percent", models.FloatField()),
                ("total_avg", models.FloatField()),
                ("total_percent", models.FloatField()),
                ("activite_median", models.FloatField()),
                ("activite_median_percent", models.FloatField()),
                ("activite_avg", models.FloatField()),
                ("activite_percent", models.FloatField()),
                ("habitat_median", models.FloatField()),
                ("habitat_median_percent", models.FloatField()),
                ("habitat_avg", models.FloatField()),
                ("habitat_percent", models.FloatField()),
                ("mixte_median", models.FloatField()),
                ("mixte_median_percent", models.FloatField()),
                ("mixte_avg", models.FloatField()),
                ("mixte_percent", models.FloatField()),
                ("route_median", models.FloatField()),
                ("route_median_percent", models.FloatField()),
                ("route_avg", models.FloatField()),
                ("route_percent", models.FloatField()),
                ("ferroviaire_median", models.FloatField()),
                ("ferroviaire_median_percent", models.FloatField()),
                ("ferroviaire_avg", models.FloatField()),
                ("ferroviaire_percent", models.FloatField()),
                ("inconnu_median", models.FloatField()),
                ("inconnu_median_percent", models.FloatField()),
                ("inconnu_avg", models.FloatField()),
                ("inconnu_percent", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landconsocomparison",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandConsoStats",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                (
                    "comparison_level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                (
                    "comparison_id",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("from_year", models.IntegerField()),
                ("to_year", models.IntegerField()),
                ("total", models.FloatField()),
                ("total_percent", models.FloatField()),
                ("activite", models.FloatField()),
                ("activite_percent", models.FloatField()),
                ("habitat", models.FloatField()),
                ("habitat_percent", models.FloatField()),
                ("mixte", models.FloatField()),
                ("mixte_percent", models.FloatField()),
                ("route", models.FloatField()),
                ("route_percent", models.FloatField()),
                ("ferroviaire", models.FloatField()),
                ("ferroviaire_percent", models.FloatField()),
                ("inconnu", models.FloatField()),
                ("inconnu_percent", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landconsostats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandPop",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("year", models.IntegerField()),
                ("evolution", models.IntegerField()),
                ("population", models.IntegerField()),
                ("source", models.CharField(choices=[("INSEE", "Insee"), ("PROJECTION", "Projection")])),
            ],
            options={
                "db_table": "public_data_landpop",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandPopComparison",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "relevance_level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("land_id", models.CharField()),
                ("from_year", models.IntegerField()),
                ("to_year", models.IntegerField()),
                ("evolution_median", models.FloatField()),
                ("evolution_median_percent", models.FloatField()),
                ("evolution_avg", models.FloatField()),
                ("evolution_percent", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landpopcomparison",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LandPopStats",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("land_id", models.CharField()),
                (
                    "land_type",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("comparison_level", models.CharField()),
                (
                    "comparison_id",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ]
                    ),
                ),
                ("from_year", models.IntegerField()),
                ("to_year", models.IntegerField()),
                ("evolution", models.FloatField()),
                ("evolution_percent", models.FloatField()),
            ],
            options={
                "db_table": "public_data_landpopstats",
                "managed": False,
            },
        ),
    ]
