# Generated by Django 4.1.7 on 2023-03-28 13:22

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("project", "0050_auto_20230224_1306"),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalRequest",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("first_name", models.CharField(max_length=150, verbose_name="Prénom")),
                ("last_name", models.CharField(max_length=150, verbose_name="Nom")),
                (
                    "function",
                    models.CharField(
                        max_length=250, null=True, verbose_name="Fonction"
                    ),
                ),
                (
                    "organism",
                    models.CharField(
                        choices=[
                            ("AGENCE", "Agence d'urbanisme"),
                            ("AMENAG", "Aménageur"),
                            ("ASSOCI", "Association"),
                            ("BUREAU", "Bureau d'études"),
                            ("COMMUN", "Commune"),
                            ("DDT", "DDT"),
                            ("DEPART", "Département"),
                            ("DREAL", "DREAL"),
                            ("EPCI", "EPCI"),
                            ("EPF", "EPF"),
                            ("GIP", "GIP"),
                            ("PARTIC", "Particulier"),
                            ("REGION", "Région"),
                            ("SCOT", "SCOT"),
                            ("AUTRE", "Autre"),
                        ],
                        default="COMMUN",
                        max_length=30,
                        verbose_name="Organisme",
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="E-mail")),
                ("created_date", models.DateTimeField(blank=True, editable=False)),
                ("updated_date", models.DateTimeField(blank=True, editable=False)),
                (
                    "sent_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="date d'envoi"
                    ),
                ),
                (
                    "done",
                    models.BooleanField(default=False, verbose_name="A été envoyé ?"),
                ),
                ("sent_file", models.TextField(blank=True, max_length=100, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="project.project",
                        verbose_name="Projet",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="demandeur",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Demande d'un diagnostic",
                "verbose_name_plural": "historical Demandes de diagnostics",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProject",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "emprise_origin",
                    models.CharField(
                        choices=[
                            ("UNSET", "Origine non renseignée"),
                            ("FROM_SHP", "Construit depuis un fichier shape"),
                            ("FROM_CITIES", "Construit depuis une liste de villes"),
                            ("WITH_EMPRISE", "Emprise déjà fournie"),
                        ],
                        default="UNSET",
                        max_length=20,
                        verbose_name="Origine de l'emprise",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "shape_file",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Fichier .shp",
                    ),
                ),
                (
                    "import_error",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Message d'erreur traitement emprise",
                    ),
                ),
                (
                    "import_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date et heure d'import"
                    ),
                ),
                (
                    "import_status",
                    models.CharField(
                        choices=[
                            ("MISSING", "Emprise à renseigner"),
                            ("PENDING", "Traitement du fichier Shape en cours"),
                            ("SUCCESS", "Emprise renseignée"),
                            ("FAILED", "Création de l'emprise échouée"),
                        ],
                        default="MISSING",
                        max_length=10,
                        verbose_name="Statut import",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Si non coché, le diagnostic n'est accessible que par vous. Si coché tous ceux qui ont l'URL peuvent y accéder. Utile pour partager le diagnostic par e-mail à vos collègues par exemple.",
                        verbose_name="Est publiquement accessible",
                    ),
                ),
                (
                    "analyse_start_date",
                    models.CharField(
                        choices=[
                            ("2009", "2009"),
                            ("2010", "2010"),
                            ("2011", "2011"),
                            ("2012", "2012"),
                            ("2013", "2013"),
                            ("2014", "2014"),
                            ("2015", "2015"),
                            ("2016", "2016"),
                            ("2017", "2017"),
                            ("2018", "2018"),
                            ("2019", "2019"),
                            ("2020", "2020"),
                        ],
                        default="2015",
                        help_text="Utile pour analyser votre territoire sur une période différente.",
                        max_length=4,
                        verbose_name="Année de début de période d'analyse",
                    ),
                ),
                (
                    "analyse_end_date",
                    models.CharField(
                        choices=[
                            ("2009", "2009"),
                            ("2010", "2010"),
                            ("2011", "2011"),
                            ("2012", "2012"),
                            ("2013", "2013"),
                            ("2014", "2014"),
                            ("2015", "2015"),
                            ("2016", "2016"),
                            ("2017", "2017"),
                            ("2018", "2018"),
                            ("2019", "2019"),
                            ("2020", "2020"),
                        ],
                        default="2018",
                        help_text="Utile pour analyser votre territoire sur une période différente.",
                        max_length=4,
                        verbose_name="Année de fin de période d'analyse",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("COMP", "Composite"),
                        ],
                        default="COMMUNE",
                        help_text="Utilisé dans les rapports afin de déterminer le niveau d'aggrégation des données à afficher. Si EPCI est sélectionné, alors les rapports montre des données EPCI par EPCI.",
                        max_length=7,
                        verbose_name="Niveau d'analyse",
                    ),
                ),
                (
                    "land_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("COMP", "Composite"),
                        ],
                        default="EPCI",
                        help_text="Indique le niveau administratif des territoires sélectionnés par l'utilisateur lors de la création du diagnostic. Cela va de la commune à la région.",
                        max_length=7,
                        null=True,
                        verbose_name="Type de territoire",
                    ),
                ),
                (
                    "land_ids",
                    models.CharField(
                        blank=True,
                        help_text="Contient les identifiants qui composent le territoire du diagnostic. Il faut croiser cette donnée avec 'land_type' pour être en mesure de de récupérer dans la base les instances correspondantes.",
                        max_length=255,
                        null=True,
                        verbose_name="Type de territoire",
                    ),
                ),
                (
                    "look_a_like",
                    models.CharField(
                        blank=True,
                        help_text="We need a way to find Project related within Cerema's data. this is the purpose of this field which has a very specific rule of construction, it's like a slug: EPCI_[ID], DEPART_[ID] (département), REGION_[ID], COMMUNE_[ID]. field can contain several public key separate by ;",
                        max_length=250,
                        null=True,
                        verbose_name="Territoire pour se comparer",
                    ),
                ),
                (
                    "target_2031",
                    models.IntegerField(
                        default=50,
                        help_text="A date, l'objectif nationnal est de réduire de 50% la consommation d'espace d'ici à 2031. Cet objectif doit être personnalisé localement par les SRADDET. Vous pouvez changer l'objectif pour tester différents scénarios.",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Objectif 2031 (en %)",
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, editable=False)),
                ("updated_date", models.DateTimeField(blank=True, editable=False)),
                (
                    "first_year_ocsge",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(2000)],
                        verbose_name="Premier millésime OCSGE",
                    ),
                ),
                (
                    "last_year_ocsge",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(2000)],
                        verbose_name="Dernier millésime OCSGE",
                    ),
                ),
                (
                    "folder_name",
                    models.CharField(
                        blank=True, max_length=15, null=True, verbose_name="Dossier"
                    ),
                ),
                (
                    "territory_name",
                    models.CharField(
                        blank=True,
                        help_text="C'est le nom qui est utilisé pour désigner votre territoire, notamment dans le rapport word.",
                        max_length=250,
                        null=True,
                        verbose_name="Territoire",
                    ),
                ),
                (
                    "cover_image",
                    models.TextField(blank=True, max_length=100, null=True),
                ),
                (
                    "theme_map_conso",
                    models.TextField(blank=True, max_length=100, null=True),
                ),
                (
                    "theme_map_artif",
                    models.TextField(blank=True, max_length=100, null=True),
                ),
                (
                    "theme_map_understand_artif",
                    models.TextField(blank=True, max_length=100, null=True),
                ),
                (
                    "async_city_and_combined_emprise_done",
                    models.BooleanField(default=False),
                ),
                ("async_cover_image_done", models.BooleanField(default=False)),
                (
                    "async_find_first_and_last_ocsge_done",
                    models.BooleanField(default=False),
                ),
                ("async_add_neighboors_done", models.BooleanField(default=False)),
                (
                    "async_generate_theme_map_conso_done",
                    models.BooleanField(default=False),
                ),
                (
                    "async_generate_theme_map_artif_done",
                    models.BooleanField(default=False),
                ),
                (
                    "async_theme_map_understand_artif_done",
                    models.BooleanField(default=False),
                ),
                ("couverture_usage", models.JSONField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="propriétaire",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Diagnostic en ligne",
                "verbose_name_plural": "historical Diagnostics en lignes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
