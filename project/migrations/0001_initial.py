# Generated by Django 4.2.13 on 2024-12-18 12:14

import config.storages
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import project.models.project_base
import project.models.request
import public_data.models.mixins
import simple_history.models
import utils.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("public_data", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        max_length=100, validators=[utils.validators.is_alpha_validator], verbose_name="Nom"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Si non coché, le diagnostic n'est accessible que par vous. Si coché tous ceux qui ont l'URL peuvent y accéder. Utile pour partager le diagnostic par e-mail à vos collègues par exemple.",
                        verbose_name="Est publiquement accessible",
                    ),
                ),
                (
                    "analyse_start_date",
                    models.CharField(
                        choices=[
                            ("2009", "2009"),
                            ("2010", "2010"),
                            ("2011", "2011"),
                            ("2012", "2012"),
                            ("2013", "2013"),
                            ("2014", "2014"),
                            ("2015", "2015"),
                            ("2016", "2016"),
                            ("2017", "2017"),
                            ("2018", "2018"),
                            ("2019", "2019"),
                            ("2020", "2020"),
                            ("2021", "2021"),
                            ("2022", "2022"),
                        ],
                        default="2015",
                        max_length=4,
                        verbose_name="Année de début de période du diagnostic",
                    ),
                ),
                (
                    "analyse_end_date",
                    models.CharField(
                        choices=[
                            ("2009", "2009"),
                            ("2010", "2010"),
                            ("2011", "2011"),
                            ("2012", "2012"),
                            ("2013", "2013"),
                            ("2014", "2014"),
                            ("2015", "2015"),
                            ("2016", "2016"),
                            ("2017", "2017"),
                            ("2018", "2018"),
                            ("2019", "2019"),
                            ("2020", "2020"),
                            ("2021", "2021"),
                            ("2022", "2022"),
                        ],
                        default="2018",
                        max_length=4,
                        verbose_name="Année de fin de période du diagnostic",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ],
                        default="COMMUNE",
                        help_text="Utilisé dans les rapports afin de déterminer le niveau d'aggrégation des données à afficher. Si EPCI est sélectionné, alors les rapports montre des données EPCI par EPCI.",
                        max_length=7,
                        verbose_name="Niveau d'analyse",
                    ),
                ),
                ("public_keys", models.CharField(blank=True, max_length=255, null=True, verbose_name="Clé publiques")),
                (
                    "land_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ],
                        default="EPCI",
                        help_text="Indique le niveau administratif des territoires sélectionnés par l'utilisateur lors de la création du diagnostic. Cela va de la commune à la région.",
                        max_length=7,
                        null=True,
                        verbose_name="Type de territoire",
                    ),
                ),
                (
                    "land_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Identifiants du territoire du diagnostic"
                    ),
                ),
                (
                    "look_a_like",
                    models.CharField(
                        blank=True, max_length=250, null=True, verbose_name="Territoire pour se comparer"
                    ),
                ),
                (
                    "target_2031",
                    models.DecimalField(
                        decimal_places=1,
                        default=50,
                        help_text="L'objectif fixé au niveau national par la loi Climat et résilience est de réduire de 50% la consommation d'espaces sur 2021-2031 par rapport à la décennie précédente.<br /><br />Cet objectif doit être territorialisé et peut être modulé via les documents de planification régionale ainsi que les documents d'urbanisme (SCOT, PLU(i), cartes communales).<br /><br /> Aussi, l'objectif de réduction fixé à défaut à -50% est indicatif et ne correspond pas nécessairement à l'objectif qui sera fixé pour le territoire sélectionné.",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Objectif de réduction à 2031 (en %)",
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "available_millesimes",
                    models.CharField(
                        blank=True,
                        help_text="Millésimes disponibles sur la période d'analyse du diagnostic.",
                        max_length=255,
                        null=True,
                        verbose_name="OCS GE disponibles",
                    ),
                ),
                (
                    "first_year_ocsge",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(2000)],
                        verbose_name="Premier millésime OCSGE",
                    ),
                ),
                (
                    "last_year_ocsge",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(2000)],
                        verbose_name="Dernier millésime OCSGE",
                    ),
                ),
                ("folder_name", models.CharField(blank=True, max_length=15, null=True, verbose_name="Dossier")),
                (
                    "territory_name",
                    models.CharField(
                        blank=True,
                        help_text="C'est le nom qui est utilisé pour désigner votre territoire, notamment dans le rapport word.",
                        max_length=250,
                        null=True,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Territoire",
                    ),
                ),
                (
                    "cover_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=config.storages.PublicMediaStorage(),
                        upload_to=project.models.project_base.upload_in_project_folder,
                    ),
                ),
                (
                    "theme_map_conso",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=config.storages.PublicMediaStorage(),
                        upload_to=project.models.project_base.upload_in_project_folder,
                    ),
                ),
                (
                    "theme_map_artif",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=config.storages.PublicMediaStorage(),
                        upload_to=project.models.project_base.upload_in_project_folder,
                    ),
                ),
                (
                    "theme_map_understand_artif",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=config.storages.PublicMediaStorage(),
                        upload_to=project.models.project_base.upload_in_project_folder,
                    ),
                ),
                (
                    "theme_map_fill_gpu",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=config.storages.PublicMediaStorage(),
                        upload_to=project.models.project_base.upload_in_project_folder,
                    ),
                ),
                (
                    "ocsge_coverage_status",
                    models.CharField(
                        choices=[
                            ("COMPLETE_UNIFORM", "Complet et uniforme"),
                            ("COMPLETE_NOT_UNIFORM", "Complet mais non uniforme"),
                            ("PARTIAL", "Partiel"),
                            ("NO_DATA", "Aucune donnée"),
                            ("UNDEFINED", "Non défini"),
                        ],
                        default="UNDEFINED",
                        max_length=20,
                        verbose_name="Statut de la couverture OCS GE",
                    ),
                ),
                ("async_add_city_done", models.BooleanField(default=False)),
                ("async_set_combined_emprise_done", models.BooleanField(default=False)),
                ("async_cover_image_done", models.BooleanField(default=False)),
                ("async_find_first_and_last_ocsge_done", models.BooleanField(default=False)),
                ("async_add_comparison_lands_done", models.BooleanField(default=False)),
                ("async_generate_theme_map_conso_done", models.BooleanField(default=False)),
                ("async_generate_theme_map_artif_done", models.BooleanField(default=False)),
                ("async_theme_map_understand_artif_done", models.BooleanField(default=False)),
                ("async_theme_map_fill_gpu_done", models.BooleanField(default=False)),
                ("async_ocsge_coverage_status_done", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Diagnostic en ligne",
                "verbose_name_plural": "Diagnostics en lignes",
                "ordering": ["-created_date"],
            },
        ),
        migrations.CreateModel(
            name="RNUPackage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(blank=True, null=True, upload_to="rnu_packages")),
                ("app_version", models.CharField(max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("departement_official_id", models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="RNUPackageRequest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("departement_official_id", models.CharField(max_length=10)),
                ("email", models.EmailField(max_length=254)),
                ("requested_at", models.DateTimeField(auto_now_add=True)),
                ("requested_diagnostics_before_package_request", models.IntegerField()),
                ("account_created_for_package", models.BooleanField()),
                (
                    "rnu_package",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="project.rnupackage"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Request",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "first_name",
                    models.CharField(
                        max_length=150,
                        null=True,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Prénom",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=150, null=True, validators=[utils.validators.is_alpha_validator], verbose_name="Nom"
                    ),
                ),
                (
                    "function",
                    models.CharField(
                        max_length=250,
                        null=True,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Fonction",
                    ),
                ),
                (
                    "organism",
                    models.CharField(
                        choices=[
                            ("AGENCE", "Agence d'urbanisme"),
                            ("ASSOCI", "Association"),
                            ("BUREAU", "Bureau d'études"),
                            ("COMMUN", "Commune"),
                            ("DDT", "DDT"),
                            ("DDTM", "DDTM"),
                            ("DEAL", "DEAL"),
                            ("DREAL", "DREAL"),
                            ("DRIEAT", "DRIEAT"),
                            ("EPCI", "EPCI"),
                            ("PARTIC", "Particulier"),
                            ("SCOT", "SCOT"),
                            ("AUTRE", "Autre"),
                        ],
                        default="COMMUN",
                        max_length=30,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Organisme",
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="E-mail")),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                ("sent_date", models.DateTimeField(blank=True, null=True, verbose_name="date d'envoi")),
                ("done", models.BooleanField(default=False, verbose_name="A été envoyé ?")),
                (
                    "requested_document",
                    models.CharField(
                        choices=[
                            ("rapport-conso", "Rapport de consommation"),
                            ("rapport-complet", "Rapport complet"),
                            ("rapport-local", "Rapport local"),
                        ],
                        max_length=30,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Document demandé",
                    ),
                ),
                (
                    "sent_file",
                    models.FileField(blank=True, null=True, upload_to=project.models.request.upload_in_project_folder),
                ),
                (
                    "du_en_cours",
                    models.BooleanField(
                        default=False,
                        verbose_name="Le document d'urbanisme du territoire est-il en cours de revision (au moment de la demande)",
                    ),
                ),
                (
                    "competence_urba",
                    models.BooleanField(
                        default=False,
                        verbose_name="Le territoire a-t-il la compétence urbanisme (au moment de la demande)",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="project.project",
                        verbose_name="Projet",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="demandeur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Demande d'un diagnostic",
                "verbose_name_plural": "Demandes de diagnostics",
                "ordering": ["-created_date"],
            },
        ),
        migrations.CreateModel(
            name="ProjectCommune",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("group_name", models.CharField(blank=True, max_length=100, null=True, verbose_name="Nom du groupe")),
                ("commune", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="public_data.commune")),
                ("project", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="project.project")),
            ],
        ),
        migrations.AddField(
            model_name="project",
            name="cities",
            field=models.ManyToManyField(
                blank=True, through="project.ProjectCommune", to="public_data.commune", verbose_name="Communes"
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="propriétaire",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalRequest",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                (
                    "first_name",
                    models.CharField(
                        max_length=150,
                        null=True,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Prénom",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=150, null=True, validators=[utils.validators.is_alpha_validator], verbose_name="Nom"
                    ),
                ),
                (
                    "function",
                    models.CharField(
                        max_length=250,
                        null=True,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Fonction",
                    ),
                ),
                (
                    "organism",
                    models.CharField(
                        choices=[
                            ("AGENCE", "Agence d'urbanisme"),
                            ("ASSOCI", "Association"),
                            ("BUREAU", "Bureau d'études"),
                            ("COMMUN", "Commune"),
                            ("DDT", "DDT"),
                            ("DDTM", "DDTM"),
                            ("DEAL", "DEAL"),
                            ("DREAL", "DREAL"),
                            ("DRIEAT", "DRIEAT"),
                            ("EPCI", "EPCI"),
                            ("PARTIC", "Particulier"),
                            ("SCOT", "SCOT"),
                            ("AUTRE", "Autre"),
                        ],
                        default="COMMUN",
                        max_length=30,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Organisme",
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="E-mail")),
                ("created_date", models.DateTimeField(blank=True, editable=False)),
                ("updated_date", models.DateTimeField(blank=True, editable=False)),
                ("sent_date", models.DateTimeField(blank=True, null=True, verbose_name="date d'envoi")),
                ("done", models.BooleanField(default=False, verbose_name="A été envoyé ?")),
                (
                    "requested_document",
                    models.CharField(
                        choices=[
                            ("rapport-conso", "Rapport de consommation"),
                            ("rapport-complet", "Rapport complet"),
                            ("rapport-local", "Rapport local"),
                        ],
                        max_length=30,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Document demandé",
                    ),
                ),
                ("sent_file", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "du_en_cours",
                    models.BooleanField(
                        default=False,
                        verbose_name="Le document d'urbanisme du territoire est-il en cours de revision (au moment de la demande)",
                    ),
                ),
                (
                    "competence_urba",
                    models.BooleanField(
                        default=False,
                        verbose_name="Le territoire a-t-il la compétence urbanisme (au moment de la demande)",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="project.project",
                        verbose_name="Projet",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="demandeur",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Demande d'un diagnostic",
                "verbose_name_plural": "historical Demandes de diagnostics",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProject",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        max_length=100, validators=[utils.validators.is_alpha_validator], verbose_name="Nom"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Si non coché, le diagnostic n'est accessible que par vous. Si coché tous ceux qui ont l'URL peuvent y accéder. Utile pour partager le diagnostic par e-mail à vos collègues par exemple.",
                        verbose_name="Est publiquement accessible",
                    ),
                ),
                (
                    "analyse_start_date",
                    models.CharField(
                        choices=[
                            ("2009", "2009"),
                            ("2010", "2010"),
                            ("2011", "2011"),
                            ("2012", "2012"),
                            ("2013", "2013"),
                            ("2014", "2014"),
                            ("2015", "2015"),
                            ("2016", "2016"),
                            ("2017", "2017"),
                            ("2018", "2018"),
                            ("2019", "2019"),
                            ("2020", "2020"),
                            ("2021", "2021"),
                            ("2022", "2022"),
                        ],
                        default="2015",
                        max_length=4,
                        verbose_name="Année de début de période du diagnostic",
                    ),
                ),
                (
                    "analyse_end_date",
                    models.CharField(
                        choices=[
                            ("2009", "2009"),
                            ("2010", "2010"),
                            ("2011", "2011"),
                            ("2012", "2012"),
                            ("2013", "2013"),
                            ("2014", "2014"),
                            ("2015", "2015"),
                            ("2016", "2016"),
                            ("2017", "2017"),
                            ("2018", "2018"),
                            ("2019", "2019"),
                            ("2020", "2020"),
                            ("2021", "2021"),
                            ("2022", "2022"),
                        ],
                        default="2018",
                        max_length=4,
                        verbose_name="Année de fin de période du diagnostic",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ],
                        default="COMMUNE",
                        help_text="Utilisé dans les rapports afin de déterminer le niveau d'aggrégation des données à afficher. Si EPCI est sélectionné, alors les rapports montre des données EPCI par EPCI.",
                        max_length=7,
                        verbose_name="Niveau d'analyse",
                    ),
                ),
                ("public_keys", models.CharField(blank=True, max_length=255, null=True, verbose_name="Clé publiques")),
                (
                    "land_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("COMM", "Commune"),
                            ("EPCI", "EPCI"),
                            ("DEPART", "Département"),
                            ("SCOT", "SCoT"),
                            ("REGION", "Région"),
                            ("NATION", "Nation"),
                            ("COMP", "Composite"),
                        ],
                        default="EPCI",
                        help_text="Indique le niveau administratif des territoires sélectionnés par l'utilisateur lors de la création du diagnostic. Cela va de la commune à la région.",
                        max_length=7,
                        null=True,
                        verbose_name="Type de territoire",
                    ),
                ),
                (
                    "land_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Identifiants du territoire du diagnostic"
                    ),
                ),
                (
                    "look_a_like",
                    models.CharField(
                        blank=True, max_length=250, null=True, verbose_name="Territoire pour se comparer"
                    ),
                ),
                (
                    "target_2031",
                    models.DecimalField(
                        decimal_places=1,
                        default=50,
                        help_text="L'objectif fixé au niveau national par la loi Climat et résilience est de réduire de 50% la consommation d'espaces sur 2021-2031 par rapport à la décennie précédente.<br /><br />Cet objectif doit être territorialisé et peut être modulé via les documents de planification régionale ainsi que les documents d'urbanisme (SCOT, PLU(i), cartes communales).<br /><br /> Aussi, l'objectif de réduction fixé à défaut à -50% est indicatif et ne correspond pas nécessairement à l'objectif qui sera fixé pour le territoire sélectionné.",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Objectif de réduction à 2031 (en %)",
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, editable=False)),
                ("updated_date", models.DateTimeField(blank=True, editable=False)),
                (
                    "available_millesimes",
                    models.CharField(
                        blank=True,
                        help_text="Millésimes disponibles sur la période d'analyse du diagnostic.",
                        max_length=255,
                        null=True,
                        verbose_name="OCS GE disponibles",
                    ),
                ),
                (
                    "first_year_ocsge",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(2000)],
                        verbose_name="Premier millésime OCSGE",
                    ),
                ),
                (
                    "last_year_ocsge",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(2000)],
                        verbose_name="Dernier millésime OCSGE",
                    ),
                ),
                ("folder_name", models.CharField(blank=True, max_length=15, null=True, verbose_name="Dossier")),
                (
                    "territory_name",
                    models.CharField(
                        blank=True,
                        help_text="C'est le nom qui est utilisé pour désigner votre territoire, notamment dans le rapport word.",
                        max_length=250,
                        null=True,
                        validators=[utils.validators.is_alpha_validator],
                        verbose_name="Territoire",
                    ),
                ),
                ("cover_image", models.TextField(blank=True, max_length=100, null=True)),
                ("theme_map_conso", models.TextField(blank=True, max_length=100, null=True)),
                ("theme_map_artif", models.TextField(blank=True, max_length=100, null=True)),
                ("theme_map_understand_artif", models.TextField(blank=True, max_length=100, null=True)),
                ("theme_map_fill_gpu", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "ocsge_coverage_status",
                    models.CharField(
                        choices=[
                            ("COMPLETE_UNIFORM", "Complet et uniforme"),
                            ("COMPLETE_NOT_UNIFORM", "Complet mais non uniforme"),
                            ("PARTIAL", "Partiel"),
                            ("NO_DATA", "Aucune donnée"),
                            ("UNDEFINED", "Non défini"),
                        ],
                        default="UNDEFINED",
                        max_length=20,
                        verbose_name="Statut de la couverture OCS GE",
                    ),
                ),
                ("async_add_city_done", models.BooleanField(default=False)),
                ("async_set_combined_emprise_done", models.BooleanField(default=False)),
                ("async_cover_image_done", models.BooleanField(default=False)),
                ("async_find_first_and_last_ocsge_done", models.BooleanField(default=False)),
                ("async_add_comparison_lands_done", models.BooleanField(default=False)),
                ("async_generate_theme_map_conso_done", models.BooleanField(default=False)),
                ("async_generate_theme_map_artif_done", models.BooleanField(default=False)),
                ("async_theme_map_understand_artif_done", models.BooleanField(default=False)),
                ("async_theme_map_fill_gpu_done", models.BooleanField(default=False)),
                ("async_ocsge_coverage_status_done", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="propriétaire",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Diagnostic en ligne",
                "verbose_name_plural": "historical Diagnostics en lignes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ErrorTracking",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("exception", models.TextField()),
                (
                    "request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="errors", to="project.request"
                    ),
                ),
            ],
            options={
                "ordering": ["-created_date"],
            },
        ),
        migrations.CreateModel(
            name="Emprise",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("mpoly", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                (
                    "srid_source",
                    models.IntegerField(
                        choices=[
                            (2154, "France Métropolitaine et Corse"),
                            (32620, "Guadeloupe et Martinique"),
                            (2972, "Guyane Française"),
                            (2975, "La réunion"),
                            (4326, "Monde (GPS)"),
                            (3857, "Monde (Google Maps, OpenStreetMap etc.)"),
                        ],
                        default=2154,
                        verbose_name="SRID",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="project.project", verbose_name="Projet"
                    ),
                ),
            ],
            options={
                "ordering": ["project"],
            },
            bases=(public_data.models.mixins.DataColorationMixin, models.Model),
        ),
    ]
